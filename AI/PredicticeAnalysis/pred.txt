import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Step 1: Data Generation (for demonstration purposes)
# Generate synthetic data
np.random.seed(42)
n_samples = 100
X1 = np.random.rand(n_samples) * 10  # Random values for feature 1
X2 = np.random.rand(n_samples) * 20  # Random values for feature 2
noise = np.random.randn(n_samples)  # Random noise
y = 2 * X1 + 3 * X2 + noise  # Target variable with some noise

# Create a DataFrame
data = pd.DataFrame({'feature1': X1, 'feature2': X2, 'target': y})

# Display the first few rows of the dataset
print(data.head())

# Step 2: Define features and target
X = data[['feature1', 'feature2']]
y = data['target']

# Step 3: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Initialize the model
model = LinearRegression()

# Step 5: Train the model
model.fit(X_train, y_train)

# Step 6: Make predictions
y_pred = model.predict(X_test)

# Step 7: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

# Step 8: Plot the results
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted Values')
plt.show()

# Step 9: Visualizing residuals
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.title('Residuals vs Predicted Values')
plt.axhline(0, color='red', linestyle='--')
plt.show()

# Step 10: Print model coefficients
print(f'Coefficients: {model.coef_}')
print(f'Intercept: {model.intercept_}')